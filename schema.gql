# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AiResponse {
  mood: String!
  sentiment: String!
  summary: String!
}

input AnalyzeJournalInput {
  content: String!
}

enum Category {
  EDUCATION
  FINANCE
  HEALTH
  OTHER
  PERSONAL
  TRAVEL
  WORK
}

type CategoryDistributionData {
  category: String!
  count: Float!
}

input CreateJournalInput {
  category: Category!
  content: String!
  title: String!
}

input CreateUserInput {
  """Email of the user"""
  email: String!

  """Password of the user"""
  password: String!

  """Role of the user"""
  role: String
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type EntryLengthStats {
  avgLength: Float!
  maxLength: Float!
}

type HeatmapData {
  count: Float!
  date: String!
}

type JournalEntry {
  category: Category!
  content: String!
  createdAt: DateTime!
  id: String!
  title: String!
  updatedAt: DateTime!
  userId: String!
}

input LoginRequestDTO {
  email: String!
  password: String!
}

type LoginResponseDTO {
  access_token: String!
  user: UserEntity!
}

type Mutation {
  analyzeJournal(input: AnalyzeJournalInput!): AiResponse!
  changeUserRole(id: String!, newRole: Role!): UserEntity!

  """Create a new journal entry for the authenticated user"""
  createJournalEntry(data: CreateJournalInput!): JournalEntry!
  createUser(createUserInput: CreateUserInput!): UserEntity!

  """Delete a journal entry"""
  deleteJournalEntry(id: String!): Boolean!

  """Authenticate a user and return an access token."""
  login(loginInput: LoginRequestDTO!): LoginResponseDTO!

  """Register a new user and return an access token."""
  register(registerInput: RegisterRequestDTO!): RegisterResponseDTO!
  removeUser(email: String!): UserEntity!

  """Update an existing journal entry"""
  updateJournalEntry(data: UpdateJournalInput!): JournalEntry!
}

type Query {
  findOne(email: String!): UserEntity!
  getAllUserJournals: [JournalEntry!]!
  getAllUsers: [UserEntity!]!

  """Fetch the distribution of journal entries by category"""
  getCategoryDistribution: [CategoryDistributionData!]!

  """Fetch statistics on journal entry lengths"""
  getEntryLengthStats: EntryLengthStats!

  """Fetch all journal entries for the authenticated user with pagination"""
  getJournalEntries(limit: Int, page: Int): [JournalEntry!]!

  """Fetch a specific journal entry by ID"""
  getJournalEntry(id: String!): JournalEntry!

  """Fetch the heatmap data of journal entries by day"""
  getJournalHeatmap: [HeatmapData!]!

  """
  Analyze the time of day when journal entries are most frequently written
  """
  getTimeOfDayAnalysis: [TimeOfDayData!]!

  """Fetch the most commonly used words in journal entries"""
  getWordTrends(limit: Int): [WordTrendData!]!
  whoAmI: UserEntity!
}

input RegisterRequestDTO {
  email: String!
  password: String!
  role: Role
}

type RegisterResponseDTO {
  access_token: String!
  user: UserEntity!
}

"""The roles a user can have"""
enum Role {
  ADMIN
  SUPERADMIN
  USER
}

type TimeOfDayData {
  count: Float!
  hour: Float!
}

input UpdateJournalInput {
  category: Category
  content: String
  id: String!
  title: String
}

type UserEntity {
  createdAt: DateTime!
  email: String!
  id: String!
  password: String!
  role: Role!
}

type WordTrendData {
  count: Float!
  word: String!
}