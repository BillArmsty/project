# 🧠 Personal Journaling App — Implementation Plan

## 🔧 Technology Stack

### ✅ Backend (API & AI Layer)
- **Framework**: NestJS  
  _Modular and scalable architecture for building efficient GraphQL APIs._
- **Language**: TypeScript  
  _Provides type safety and better DX._
- **ORM**: Prisma  
  _Elegant and auto-typed data access layer for PostgreSQL._
- **Database**: PostgreSQL  
  _Reliable, relational database suited for journaling history._
- **Authentication**: JWT-based auth  
  _Implemented via `@nestjs/passport` and `bcrypt` for secure login._
- **AI Integration**: Hugging Face Inference API  
  _Using free models like Mistral 7B and Falcon for text generation, with fallback._
-  **GraphQL API**

### ✅ Frontend (User Interface Layer)
- **Framework**: Next.js (App Router)  
  _Full-stack React framework with server rendering support._
- **Language**: TypeScript  
  _Strongly typed frontend for robust code._
- **Styling**: Styled Components  
  _For atomic styling and custom component theming._
- **GraphQL Client**: Apollo Client  
  _Querying and mutating the GraphQL API from UI._
- **Authentication**: NextAuth.js with JWT strategy  
  _Secure session handling with frontend/server integration._
- **State Management**: React Hooks  
  _Minimal local state with `useState`, `useEffect`, and custom hooks._

## 🏗️ Architecture Overview
```

+---------------------+       +---------------------+       +---------------------+
|                     |       |                     |       |                     |
|     PostgreSQL      |       |    Hugging Face     |       |      NextAuth.js    |
|     Database        |       |    AI Service       |       |   Authentication    |
|                     |       |                     |       |                     |
+---------------------+       +---------------------+       +---------------------+
           ^                           ^                           ^
           |                           |                           |
           |                           |                           |
           v                           v                           v
+---------------------+       +---------------------+       +---------------------+
|                     |       |                     |       |                     |
|       Prisma        |       |    REST API for     |       |   JWT Strategy &    |
|       ORM           |       |    AI Analysis      |       |   Role Guards       |
|                     |       |                     |       |                     |
+---------------------+       +---------------------+       +---------------------+
           ^                           ^                           ^
           |                           |                           |
           |                           |                           |
           v                           v                           v
+-----------------------------------------------------------------+
|                                                                 |
|                          NestJS Backend                         |
|                                                                 |
|  - GraphQL API for Journaling Operations                        |
|  - REST API for AI Analysis and Token Refresh                   |
|  - Authentication and Authorization                             |
|                                                                 |
+-----------------------------------------------------------------+
                                  ^
                                  |
                                  |
                                  v
+-----------------------------------------------------------------+
|                                                                 |
|                         Next.js Frontend                        |
|                                                                 |
|  - User Interface for Journal Management                        |
|  - Authentication Handling with NextAuth.js                     |
|  - GraphQL Client for Data Fetching                             |
|                                                                 |
+-----------------------------------------------------------------+


## 📦 Monorepo Architecture

The project is structured as a monorepo:

```
monorepo/
├── backend/       # NestJS GraphQL API
└── frontend/      # Next.js 15 App Router Client



📦 backend/
├── src/
│   ├── journal/          # CRUD operations for journals
│   ├── ai/               # AI text generation service
│   ├── auth/             # Auth controller + JWT guards
│   └── users/            # User profile and preferences
├── prisma/               # DB schema and migrations
└── main.ts               # Bootstrap app

📦 frontend/
├── src/
│   ├── app/              # Pages (create, edit, dashboard)
│   ├── components/       # Shared components (Sidebar, JournalList, etc.)
│   ├── hooks/            # Custom Apollo & AI hook
│   └── styles/           # Global and theme styles
```


## 🚀 Features

### ✅ 1. Authentication
- JWT-based login/signup via NestJS
- Passwords hashed with `bcrypt`
- Session handled using NextAuth.js (JWT strategy)
- Role-based routing for `/admin` vs `/dashboard`

### ✅ 2. Journal Management
- Full CRUD operations via GraphQL
- Tag input via `react-tag-input`
- Category enum: `PERSONAL`, `WORK`, `TRAVEL`, `EDUCATION`, `OTHER`
- Tags stored using Prisma’s `connectOrCreate` logic

### ✅ 3. Dashboard + Analytics
- **Pie Chart**: Entry distribution by category
- **Line Chart**: Word count over time
- **Summary Card**: Total number of entries
- Category & Tag filters included

### ✅ 4. AI Journal Suggestions
- Mutation: `analyzeJournal(input)`
- Fallbacks using Mistral 7B, Falcon, and OpenChat
- Suggestions injected into journal content field
- Graceful loading + error state

### ✅ 5. Tags System
- Create/update entries with tags
- UI component: `TagInput` (internally manages `string[]`)
- Backend: `Tag` model with many-to-many `@relation("EntryTags")`

### ✅ 6. UI & UX Enhancements
- Smooth loading indicators on login/submit
- Pulse-style spinner during onboarding
- Modal animations + input validation with feedback
- Fully responsive dashboard layout

---

## 🧬 Database Schema

```prisma
model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  entries   JournalEntry[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model JournalEntry {
  id        String   @id @default(uuid())
  title     String
  content   String
  category  Category
  tags      Tag[]    @relation("EntryTags")
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tag {
  id      String         @id @default(uuid())
  name    String         @unique
  entries JournalEntry[] @relation("EntryTags")
}

enum Category {
  PERSONAL
  WORK
  EDUCATION
  TRAVEL
  OTHER
}
```

---

## 📅 Development Timeline

| Phase        | Days | Tasks |
|--------------|------|-------|
| **Phase 1**  | 1–3  | Setup Nest + Next, Auth, Prisma, JWT |
| **Phase 2**  | 4–6  | Journal CRUD + Tagging |
| **Phase 3**  | 7–8  | Analytics Dashboard, Charts |
| **Phase 4**  | 9–10 | AI Suggestion, UI Polish |

---

## ✅ Status Tracker

| Feature                     | Status        |
|----------------------------|---------------|
| User Auth (Nest + NextAuth)| ✅ Done       |
| Journal CRUD               | ✅ Done       |
| Analytics Dashboard        | ✅ Done       |
| Tagging System             | ✅ Done       |
| AI Suggestion (HuggingFace)| ✅ Done       |
| Loading UX                 | ✅ Done       |
| Sentiment Detection (AI)   | 🔜 Optional   |

---
